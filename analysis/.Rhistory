curve(x^next_exponent, add = TRUE, col = "violet")
curve(x^other_exponent, add = TRUE, col = "blue")
self_exponent = mean(log(rnorm(n = 200, mean = 0.7, sd = 0.05), base = 0.2))
next_exponent = mean(log(rnorm(n = 200, mean = 0.7, sd = 0.1), base = 0.2))
other_exponent = mean(log(rnorm(n = 200, mean = 0.7, sd = 0.2), base = 0.2))
curve(x^self_exponent, 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^next_exponent, add = TRUE, col = "violet")
curve(x^other_exponent, add = TRUE, col = "blue")
self_exponent = mean(log(rnorm(n = 200, mean = 0.7, sd = 0.05), base = 0.2))
next_exponent = mean(log(rnorm(n = 200, mean = 0.7, sd = 0.15), base = 0.2))
other_exponent = mean(log(rnorm(n = 200, mean = 0.7, sd = 0.25), base = 0.2))
curve(x^self_exponent, 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^next_exponent, add = TRUE, col = "violet")
curve(x^other_exponent, add = TRUE, col = "blue")
self_exponent = mean(log(rnorm(n = 200, mean = 0.8, sd = 0.05), base = 0.2))
next_exponent = mean(log(rnorm(n = 200, mean = 0.8, sd = 0.15), base = 0.2))
other_exponent = mean(log(rnorm(n = 200, mean = 0.8, sd = 0.25), base = 0.2))
curve(x^self_exponent, 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^next_exponent, add = TRUE, col = "violet")
curve(x^other_exponent, add = TRUE, col = "blue")
self_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.05), base = 0.2))
next_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.1), base = 0.2))
other_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.15), base = 0.2))
curve(x^self_exponent, 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^next_exponent, add = TRUE, col = "violet")
curve(x^other_exponent, add = TRUE, col = "blue")
target_utility = 0.4
self_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.05), base = 0.2)
self_gambles = log(target_utility, base = self_exps)
self_gambles
target_utility = 0.4
self_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.05), base = 0.2)
self_gambles = target_utility^(1/self_exps)
next_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.1), base = 0.2)
next_gambles = target_utility^(1/next_exps)
other_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.15), base = 0.2)
other_gambles = target_utility^(1/other_exps)
df_gambles = data.frame(self_gambles,next_gambles, other_gambles)
glimpse(df_gambles)
d = df_gambles %>% gather(condition, val, self_gambles:other_gambles)
data = d %>%
group_by(condition) %>%
summarize(mean_risk_preference = mean(val),
se = sd(val)/sqrt(n()))
data = data[order(data[,2],decreasing=FALSE),]
glimpse(data)
ggplot(data) +
geom_bar( aes(x=reorder(condition,mean_risk_preference), y=mean_risk_preference), stat="identity", fill="skyblue", alpha=0.7)+
geom_errorbar( aes(x=condition, ymin=mean_risk_preference -se, ymax=mean_risk_preference+se), width=0.4, colour="black", alpha=0.9, size=1.3)
target_utility = 0.4
self_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.01), base = 0.2)
self_gambles = target_utility^(1/self_exps)
next_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.1), base = 0.2)
next_gambles = target_utility^(1/next_exps)
other_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.15), base = 0.2)
other_gambles = target_utility^(1/other_exps)
df_gambles = data.frame(self_gambles,next_gambles, other_gambles)
glimpse(df_gambles)
d = df_gambles %>% gather(condition, val, self_gambles:other_gambles)
data = d %>%
group_by(condition) %>%
summarize(mean_risk_preference = mean(val),
se = sd(val)/sqrt(n()))
data = data[order(data[,2],decreasing=FALSE),]
glimpse(data)
ggplot(data) +
geom_bar( aes(x=reorder(condition,mean_risk_preference), y=mean_risk_preference), stat="identity", fill="skyblue", alpha=0.7)+
geom_errorbar( aes(x=condition, ymin=mean_risk_preference -se, ymax=mean_risk_preference+se), width=0.4, colour="black", alpha=0.9, size=1.3)
self_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.05), base = 0.2))
next_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.1), base = 0.2))
other_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.15), base = 0.2))
curve(x^self_exponent, 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^next_exponent, add = TRUE, col = "violet")
curve(x^other_exponent, add = TRUE, col = "blue")
legend(1, 0.8, legend=c("self", "next", "other"),
col=c("black", "violet", "blue"), lty=1:2, cex=0.8,
box.lty=0)
self_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.05), base = 0.2))
next_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.1), base = 0.2))
other_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.15), base = 0.2))
curve(x^self_exponent, 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^next_exponent, add = TRUE, col = "violet")
curve(x^other_exponent, add = TRUE, col = "blue")
legend(0.1, 0.8, legend=c("self", "next", "other"),
col=c("black", "violet", "blue"), lty=1:2, cex=0.8,
box.lty=0)
#start by defining three groups: self, next_person, other (asi in Hsee,1997)
#each group has noisy signal with varying sd
# self = rnorm(0,1)
# next_person = rnorm(0,2)
# other = rnorm(0,3)
#
# #also define a convex region (like the one proposed in prospect theory?)
#
# rp = function(x){e^x}
#simulate 100 samples from each of the three samples
# get_samples = function(mean = 0, sd = 1, n = 100){
#   out = 2+exp(rnorm(n,mean,sd)) #convex function
#   return(out)
# }
#
#
# self_vec = get_samples(0,1,200)
# next_vec = get_samples(0,1.2,200)
# other_vec = get_samples(0,1.5,200)
#
# df = data.frame(self_vec,next_vec, other_vec)
# glimpse(df)
# dat = df %>% gather(condition, val, self_vec:other_vec)
#
# data = dat %>%
#   group_by(condition) %>%
#   summarize(mean_risk_preference = mean(val),
#             se = sd(val)/sqrt(n()))
# data = data[order(data[,2],decreasing=FALSE),]
# glimpse(data)
# ggplot(data) +
#     geom_bar( aes(x=reorder(condition,mean_risk_preference), y=mean_risk_preference), stat="identity", fill="skyblue", alpha=0.7)+
#     geom_errorbar( aes(x=condition, ymin=mean_risk_preference -se, ymax=mean_risk_preference+se), width=0.4, colour="black", alpha=0.9, size=1.3)+
#   coord_cartesian(ylim=c(2.5,5.5))
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
self_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.05), base = 0.2))
next_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.1), base = 0.2))
other_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.15), base = 0.2))
curve(x^self_exponent, 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^next_exponent, add = TRUE, col = "violet")
curve(x^other_exponent, add = TRUE, col = "blue")
legend(0.1, 0.8, legend=c("self", "next", "other"),
col=c("black", "violet", "blue"), lty=1:2, cex=0.8,
box.lty=0)
target_utility = 0.4
self_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.01), base = 0.2)
self_gambles = target_utility^(1/self_exps)
next_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.1), base = 0.2)
next_gambles = target_utility^(1/next_exps)
other_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.15), base = 0.2)
other_gambles = target_utility^(1/other_exps)
df_gambles = data.frame(self_gambles,next_gambles, other_gambles)
glimpse(df_gambles)
d = df_gambles %>% gather(condition, val, self_gambles:other_gambles)
data = d %>%
group_by(condition) %>%
summarize(mean_risk_preference = mean(val),
se = sd(val)/sqrt(n()))
data = data[order(data[,2],decreasing=FALSE),]
glimpse(data)
ggplot(data) +
geom_bar( aes(x=reorder(condition,mean_risk_preference), y=mean_risk_preference), stat="identity", fill="skyblue", alpha=0.7)+
geom_errorbar( aes(x=condition, ymin=mean_risk_preference -se, ymax=mean_risk_preference+se), width=0.4, colour="black", alpha=0.9, size=1.3)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#start by defining three groups: self, next_person, other (asi in Hsee,1997)
#each group has noisy signal with varying sd
# self = rnorm(0,1)
# next_person = rnorm(0,2)
# other = rnorm(0,3)
#
# #also define a convex region (like the one proposed in prospect theory?)
#
# rp = function(x){e^x}
#simulate 100 samples from each of the three samples
# get_samples = function(mean = 0, sd = 1, n = 100){
#   out = 2+exp(rnorm(n,mean,sd)) #convex function
#   return(out)
# }
#
#
# self_vec = get_samples(0,1,200)
# next_vec = get_samples(0,1.2,200)
# other_vec = get_samples(0,1.5,200)
#
# df = data.frame(self_vec,next_vec, other_vec)
# glimpse(df)
# dat = df %>% gather(condition, val, self_vec:other_vec)
#
# data = dat %>%
#   group_by(condition) %>%
#   summarize(mean_risk_preference = mean(val),
#             se = sd(val)/sqrt(n()))
# data = data[order(data[,2],decreasing=FALSE),]
# glimpse(data)
# ggplot(data) +
#     geom_bar( aes(x=reorder(condition,mean_risk_preference), y=mean_risk_preference), stat="identity", fill="skyblue", alpha=0.7)+
#     geom_errorbar( aes(x=condition, ymin=mean_risk_preference -se, ymax=mean_risk_preference+se), width=0.4, colour="black", alpha=0.9, size=1.3)+
#   coord_cartesian(ylim=c(2.5,5.5))
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
my.rbeta <- function(n, sd) { # weird for sd > 0.2
x <- (0.5 - 0.2) / (1 - 0.2)
y <- (sd / (1 - 0.2)) ^ 2
alpha <- x^2 * (1-x) / y - x
beta <- x * (1-x)^2 / y - (1-x)
rbeta(n, alpha, beta) * (1 - 0.2) + 0.2
}
# sd(my.rbeta(1000, 0.1))
# self_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.05), base = 0.2))
self_exponent = mean(log(my.rbeta(n = 10000, sd = 0.01), base = 0.2))
# next_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.1), base = 0.2))
next_exponent = mean(log(my.rbeta(n = 10000, sd = 0.1), base = 0.2))
# other_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.15), base = 0.2))
other_exponent = mean(log(my.rbeta(n = 10000, sd = 0.15), base = 0.2))
curve(x^self_exponent, 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^next_exponent, add = TRUE, col = "violet")
curve(x^other_exponent, add = TRUE, col = "blue")
legend(0.1, 0.8, legend=c("self", "next", "other"),
col=c("black", "violet", "blue"), lty=1:2, cex=0.8,
box.lty=0)
target_utility = 0.5
# self_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.01), base = 0.2)
self_exps = log(my.rbeta(n = 10000, sd = 0.01), base = 0.2)
self_gambles = target_utility^(1/self_exps)
# next_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.1), base = 0.2)
next_exps = log(my.rbeta(n = 10000, sd = 0.1), base = 0.2)
next_gambles = target_utility^(1/next_exps)
# other_exps = log(rnorm(n = 200, mean = 0.5, sd = 0.15), base = 0.2)
other_exps = log(my.rbeta(n = 10000, sd = 0.15), base = 0.2)
other_gambles = target_utility^(1/other_exps)
df_gambles = data.frame(self_gambles,next_gambles, other_gambles)
glimpse(df_gambles)
d = df_gambles %>% gather(condition, val, self_gambles:other_gambles)
data = d %>%
group_by(condition) %>%
summarize(mean_risk_preference = mean(val),
se = sd(val)/sqrt(n()))
data = data[order(data[,2],decreasing=FALSE),]
glimpse(data)
ggplot(data) +
geom_bar( aes(x=reorder(condition,mean_risk_preference), y=mean_risk_preference), stat="identity", fill="skyblue", alpha=0.7)+
geom_errorbar( aes(x=condition, ymin=mean_risk_preference -se, ymax=mean_risk_preference+se), width=0.4, colour="black", alpha=0.9, size=1.3)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#start by defining three groups: self, next_person, other (asi in Hsee,1997)
#each group has noisy signal with varying sd
# self = rnorm(0,1)
# next_person = rnorm(0,2)
# other = rnorm(0,3)
#
# #also define a convex region (like the one proposed in prospect theory?)
#
# rp = function(x){e^x}
#simulate 100 samples from each of the three samples
# get_samples = function(mean = 0, sd = 1, n = 100){
#   out = 2+exp(rnorm(n,mean,sd)) #convex function
#   return(out)
# }
#
#
# self_vec = get_samples(0,1,200)
# next_vec = get_samples(0,1.2,200)
# other_vec = get_samples(0,1.5,200)
#
# df = data.frame(self_vec,next_vec, other_vec)
# glimpse(df)
# dat = df %>% gather(condition, val, self_vec:other_vec)
#
# data = dat %>%
#   group_by(condition) %>%
#   summarize(mean_risk_preference = mean(val),
#             se = sd(val)/sqrt(n()))
# data = data[order(data[,2],decreasing=FALSE),]
# glimpse(data)
# ggplot(data) +
#     geom_bar( aes(x=reorder(condition,mean_risk_preference), y=mean_risk_preference), stat="identity", fill="skyblue", alpha=0.7)+
#     geom_errorbar( aes(x=condition, ymin=mean_risk_preference -se, ymax=mean_risk_preference+se), width=0.4, colour="black", alpha=0.9, size=1.3)+
#   coord_cartesian(ylim=c(2.5,5.5))
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
my.beta.shapes <- function(sd) {
m <- (0.5 - 0.2) / (1 - 0.2)
v <- (sd / (1 - 0.2)) ^ 2
alpha <- m^2 * (1-m) / v - m
beta <- m * (1-m)^2 / v - (1-m)
c(alpha, beta)
}
my.rbeta <- function(n, sd) { # weird for sd > 0.2
shapes <- my.beta.shapes(sd)
rbeta(n, shapes[1], shapes[2]) * (1 - 0.2) + 0.2
}
my.dbeta <- function(x, sd) { # weird for sd > 0.2
shapes <- my.beta.shapes(sd)
dbeta((x - 0.2) / (1 - 0.2), shapes[1], shapes[2]) / (1 - 0.2)
}
# sd(my.rbeta(1000, 0.1))
my.dnorm <- function(n, sd) truncnorm::dtruncnorm(n, 0.2, 0.8, 0.5, sd)
my.rnorm <- function(n, sd) truncnorm::rtruncnorm(n, 0.2, 0.8, 0.5, sd)
# self_exponent = mean(log(rnorm(n = 200, mean = 0.5, sd = 0.05), base = 0.2))
self_exponent = mean(log(my.rnorm(n = 10000, sd = 0.01), base = 0.2))
library(truncnorm)
install.packages('truncnorm')
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE, type = '--', col = 'violet')
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE, type = '--', col = 'violet')
curve(x^(1/5), add = TRUE, lty = '--', col = 'violet')
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE, lty = 'l-', col = 'violet')
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE, lty = 'l', col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE, lty = 'l', col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE,  type = 'l', col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE,  type = 'l-', col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE,  type = '--', col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE,  type = '--', col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE,  type = '-', col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE,  type = '', col = "violet")
?curve
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE,  lty = '--', col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "violet")
curve(x^(1/4), add = TRUE, col = "blue")
curve(x^(1/5), add = TRUE,  lty = 4, col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "light blue")
curve(x^(1/4), add = TRUE, col = "light blue")
curve(x^(1/5), add = TRUE,  lty = 4, col = "violet")
curve(x^(.4), add = TRUE, lty = 4, col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, col = "light blue")
curve(x^(1/4), add = TRUE, col = "light blue")
curve(x^(1/5), add = TRUE,  lty = 4, col = "violet")
curve(x^(.6), add = TRUE, lty = 4, col = "violet")
curve(x^(1/3), 0, 1, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, lwd = 2, col = "light blue")
curve(x^(1/4), add = TRUE, col = "light blue")
curve(x^(1/5), add = TRUE,  lty = 4, col = "violet")
curve(x^(.6), add = TRUE, lty = 4, col = "violet")
curve(x^(1/3), 0, 1,lwd = 2, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, lwd = 2, col = "light blue")
curve(x^(1/4), add = TRUE, lwd = 2,col = "light blue")
curve(x^(1/5), add = TRUE, lwd = 2, lty = 4, col = "violet")
curve(x^(.6), add = TRUE,lwd = 2, lty = 4, col = "violet")
curve(x^(1/3), 0, 1,lwd = 2, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, lwd = 3, col = "light blue")
curve(x^(1/4), add = TRUE, lwd = 3,col = "light blue")
curve(x^(1/5), add = TRUE, lwd = 3, lty = 4, col = "violet")
curve(x^(.6), add = TRUE,lwd = 3, lty = 4, col = "violet")
curve(x^(1/3), 0, 1,lwd = 2, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, lwd = 3, col = "red")
curve(x^(1/4), add = TRUE, lwd = 3,col = "red")
curve(x^(1/5), add = TRUE, lwd = 3, lty = 4, col = "light blue")
curve(x^(.6), add = TRUE,lwd = 3, lty = 4, col = "light blue")
curve(x^(1/3), 0, 1,lwd = 2, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, lwd = 2, col = "red")
curve(x^(1/4), add = TRUE, lwd = 2,col = "red")
curve(x^(1/5), add = TRUE, lwd = 3, lty = 4, col = "light blue")
curve(x^(.6), add = TRUE,lwd = 3, lty = 4, col = "light blue")
curve(x^(1/3), 0, 1,lwd = 2, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, lwd = 2, col = "red")
curve(x^(1/4), add = TRUE, lwd = 2,col = "red")
curve(x^(1/5), add = TRUE, lwd = 3, lty = 2, col = "light blue")
curve(x^(.6), add = TRUE,lwd = 3, lty = 2, col = "light blue")
curve(x^(1/3), 0, 1,lwd = 2, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, lwd = 4, col = "red")
curve(x^(1/4), add = TRUE, lwd = 4,col = "red")
curve(x^(1/5), add = TRUE, lwd = 3, lty = 2, col = "light blue")
curve(x^(.6), add = TRUE,lwd = 3, lty = 2, col = "light blue")
curve(x^(1/3), 0, 1,lwd = 2, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, lwd = 2, lty = 4, col = "red")
curve(x^(1/4), add = TRUE, lwd = 2, lty = 4, col = "red")
curve(x^(1/5), add = TRUE, lwd = 3, lty = 2, col = "light blue")
curve(x^(.6), add = TRUE,lwd = 3, lty = 2, col = "light blue")
curve(x^(1/3), 0, 1,lwd = 2, xlab = 'gamble value', ylab =' utility')
curve(x^(1/2), add = TRUE, lwd = 2, lty = 4, col = "red")
curve(x^(1/4), add = TRUE, lwd = 2, lty = 4, col = "red")
library(tidyverse)
library(lme4)
setwd(getSrcDirectory()[1])
dat = read_csv('curiotower_raw_data_run_0.csv')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dat = read_csv('curiotower_raw_data_run_0.csv')
glimpse(dat)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dat = read_csv('curiotower_raw_data_run_0.csv')
glimpse(dat)
dat = dat %>% select('button_pressed',
'num_blocks',
'stability',
'towerID',
'prolificID')
#LME interestingness_rating ~ Jitter + Height + (1 | tower) + (1 | subjID)
summary(lmer(button_pressed ~ 1 +
stability +
num_blocks +
(1|towerID)+
(1|prolificID)))
#LME interestingness_rating ~ Jitter + Height + (1 | tower) + (1 | subjID)
summary(lmer(button_pressed ~ 1 +
stability +
num_blocks +
(1|towerID)+
(1|prolificID),data=dat))
#LME interestingness_rating ~ Jitter + Height + (1 | tower) + (1 | subjID)
model1 = lmer(button_pressed ~ 1 +
stability +
num_blocks +
(1|towerID)+
(1|prolificID),data=dat)
summary(model1)
model2 = lmer(button_pressed ~ 1 +
stability *
num_blocks +
(1|towerID)+
(1|prolificID),data=dat)
summary(model2)
anova(model1)
anova(model2)
anova(model1,model2)
dat = dat %>% select('button_pressed',
'num_blocks',
'stability',
'viewpoint',
'towerID',
'prolificID')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dat = read_csv('curiotower_raw_data_run_0.csv')
glimpse(dat)
dat = dat %>% select('button_pressed',
'num_blocks',
'stability',
'viewpoint',
'towerID',
'prolificID')
#LME interestingness_rating ~ Jitter + Height + (1 | tower) + (1 | subjID)
model1 = lmer(button_pressed ~ 1 +
stability +
num_blocks +
(1|towerID)+
(1|prolificID),data=dat)
summary(model1)
anova(model1)
model2 = lmer(button_pressed ~ 1 +
stability *
num_blocks +
(1|towerID)+
(1|prolificID),data=dat)
summary(model2)
anova(model2)
model3 = lmer(button_pressed ~ 1 +
stability *
num_blocks +
viewpoint+
(1|towerID)+
(1|prolificID),data=dat)
summary(model3)
anova(model3)
#copmare model1 and model 2
anova(model1,model2)
model3 = lmer(button_pressed ~ 1 +
stability *
num_blocks +
viewpoint+
(1|towerID)+
(1|prolificID),data=dat)
summary(model3)
anova(model3)
anova(model2, model3)
model3 = lmer(button_pressed ~ 1 +
stability +
num_blocks +
viewpoint+
(1|towerID)+
(1|prolificID),data=dat)
summary(model3)
anova(model3)
anova(model1, model3)
model3 = lmer(button_pressed ~ 1 +
stability *
num_blocks +
viewpoint+
(1|towerID)+
(1|prolificID),data=dat)
summary(model3)
anova(model3)
anova(model2, model3)
